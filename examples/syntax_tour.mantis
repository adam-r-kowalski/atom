# here is a comment. how are you

# here is a int
int: i32 = 5

# here is a float
float: f32 = 5.3

# here is a string
text: []u8 = "hello world"

double = fn(x: i32) i32 {
	x * 2
}

max = fn(x: i32, y: i32) i32 {
	if x > y { x } else { y }
}

clamp = fn(value: i32, lower: i32, upper: i32) i32 {
	if value < lower { lower }
	else if value > upper { upper }
	else { value }
}

inc = fn(mut x: i32) void {
	x += 1
}

push = fn(consume xs: list, x: i32) list {
	# implementation omitted
}

Foo = struct {
	x: i32,
	y: i32
}

test "double a number" {
	assert(double(2) == 4)
	assert(double(4) == 8)
}

test "method call syntax" {
	assert(2.double().double() == 8)
}

test "mutable data with function call syntax" {
	mut x = 5
	inc(mut x)
	assert(x == 6)
}

test "mutable data with method call syntax" {
	mut x = 5
	mut x.inc()
	assert(x == 6)
}

test "linear types using function call syntax" {
	linear xs: list = [1, 2, 3]
	linear ys = push(consume xs, 4)
	assert(ys == [1, 2, 3, 4])
	# using xs here would be an error as it has been consumed
}

test "linear types using method call syntax" {
	linear xs: list = [1, 2, 3]
	linear ys = consume xs.push(4).push(5)
	assert(ys == [1, 2, 3, 4, 5])
	# using xs here would be an error as it has been consumed
}

test "named parameters" {
	assert(clamp(value=5, low=10, high=20) == 10)
	assert(clamp(5, low=10, high=20) == 10)
	assert(5.clamp(low=10, high=20) == 10)
}

test "structs" {
	foo = Foo(x=5, y=10)
	assert(foo.x == 5)
}
